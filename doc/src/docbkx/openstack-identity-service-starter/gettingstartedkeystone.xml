<?xml version="1.0"?>
<!-- Converted by db4-upgrade version 1.0 -->
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0-extension RaxBook-1.0" xml:id="quick-guide-to-getting-started-with-keystone"><info><title>Quick Guide to Getting Started with Keystone</title></info>
  <para>
    The OpenStack Identity Service provides services for authenticating and managing user, account, and role information for OpenStack clouds running on OpenStack Compute and as an authorization service for OpenStack Object Storage.</para>
  
  <section xml:id="Identity-Service-Concepts-e1362">
  <title>Identity Service Concepts</title>
  <para>
    The Keystone Identity Service has several key concepts which are
    important to understand:
  </para>
  <variablelist>
    <varlistentry>
      <term>User</term>
      <listitem><para>A digital representation of a person, system, or service who uses OpenStack cloud services.
        Keystone authentication services will validate that incoming request are being made by the user
        who claims to be making the call. Users have a login and may be assigned tokens to access
        resources. Users may be directly assigned to a particular tenant and
        behave as if they are contained in that tenant.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Credentials</term>
      <listitem><para>
        Data that belongs to, is owned by, and generally only known by a user that the user can present
        to prove they are who they are (since nobody else should know that data).
      </para><para>Examples are:
        <itemizedlist>
          <listitem><para>a matching username and password</para></listitem>
          <listitem><para>a matching username and API key</para></listitem>
          <listitem><para>yourself and a driver's license with a picture of you</para></listitem>
          <listitem><para>a token that was issued to you that nobody else knows of</para></listitem>
        </itemizedlist>
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Authentication</term>
      <listitem><para>
        In the context of Keystone, authentication is the act of confirming the identity of a
        user or the truth of a claim. 
        Keystone will confirm that incoming request are being made by the user
        who claims to be making the call by validating a set of claims that the user is making.
        These claims are initially in the form of a set of credentials (username &amp; password,
        or username and API key). After initial confirmation, Keystone will issue the user a token
        which the user can then provide to demonstrate that their identity has been authenticated
        when making subsequent requests.
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Token</term>
      <listitem><para>
        A token is an arbitrary bit of text that is used to access
        resources. Each token has a scope which describes which
        resources are accessible with it. A token may be
        revoked at anytime and is valid for a finite duration.
      </para>
        <para>
          While Keystone supports token-based authentication in this release,
          the intention is for it to support additional protocols in the
          future. The intent is for it to be an integration service foremost, and not
          a aspire to be a full-fledged identity store and management solution.
        </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Tenant</term>
      <listitem><para> A container used to group or isolate resources and/or identity objects. Depending on the
            service operator, a tenant may map to a customer, account, organization, or project. For
            Compute, a tenant is a project. For Object Storage, a tenant is an account.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Service</term>
      <listitem><para>
        An OpenStack service, such as Compute (Nova), Object Storage (Swift), or Image Service (Glance). A service provides
        one or more endpoints through which users can access resources and perform
        (presumably useful) operations.
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Endpoint</term>
      <listitem> <para>
        An network-accessible address, usually described by URL, where a service may be accessed. If using an extension for templates, you can create an endpoint template, which represents the templates of all the consumable services that are available across the regions. 
      </para></listitem>
    </varlistentry>
    <varlistentry>
      <term>Role</term>
      <listitem><para> A personality that a user assumes when performing a specific set of operations.
        A role includes a set of right and privileges. A user assuming that role inherits
        those rights and privileges.
      </para><para>
        In Keystone, a token that is issued to a user includes the list of roles that user 
        can assume. Services that are being called by that user determine how they interpret the set
        of roles a user has and which operations or resources each roles grants access to.
      </para></listitem>
    </varlistentry>
    
  </variablelist>
  </section>
  <section xml:id="installing-openstack-identity-service"><title>Installing the OpenStack Identity Service</title>
    <para>You can install the Identity service from packages or from source.</para>
    
      <para>
        To install the latest version of the Identity Service (Keystone) from the Github
        repositories, following the following instructions.
      </para><orderedlist>
        <listitem><para>
          For Debian/Ubuntu, add the Keystone PPA to your sources.lst:
        </para><literallayout class="monospaced">
              $&gt; sudo add-apt-repository ppa:keystone-core/trunk 
              $&gt; sudo apt-get update
            </literallayout>
          </listitem>
          <listitem>
            <para>
              Install Keystone:
            </para>
            <literallayout class="monospaced">  $&gt; sudo apt-get install keystone </literallayout>
          </listitem>
        </orderedlist>
      
      <para>
        To install the latest version of Keystone from the Launchpad
        Bazaar repositories, following the following instructions.
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Grab the source tarball from
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/openstack/keystone">Github</link>
          </para>
        </listitem>
        <listitem>
          <para>
            Untar the source tarball:
          </para>
          <literallayout class="monospaced">
            $&gt; tar -xzf &lt;FILE&gt;
          </literallayout>
        </listitem>
        <listitem>
          <para>
            Change into the package directory and build/install:
          </para>
          <literallayout class="monospaced">
            $&gt; cd keystone-&lt;RELEASE&gt; $&gt; sudo python setup.py install
          </literallayout>
        </listitem>
      </orderedlist>
    
      <para>
        To install the latest version of Keystone from the Github
        repositories, see the following instructions.
      </para>
     <para> These are for Debian/Ubuntu.</para>
    
    <note>
      <para>If you want to build the Keystone documentation locally, you will also want
        to install the python-sphinx package.</para>
    </note>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              Install Git and build dependencies:
            </para>
            <literallayout class="monospaced">  $&gt; sudo apt-get install git python-eventlet python-routes python-greenlet
              swift $&gt; sudo apt-get install python-argparse python-sqlalchemy python-wsgiref
              python-pastedeploy </literallayout>
          </listitem>
        
          <listitem>
            <para>
              Branch Keystone's trunk branch. (See
              <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wiki.openstack.org/GerritWorkflow">http://wiki.openstack.org/GerritWorkflow</link>
              to get the project initially setup):
            </para>
           
            <literallayout class="monospaced">
              $&gt; git checkout master 
              $&gt; git pull origin master
            </literallayout>
          </listitem>
          <listitem>
            <para>
              Install Keystone:
            </para>
           
            <literallayout class="monospaced">
              $&gt; sudo python setup.py install
            </literallayout>
          </listitem>
        </orderedlist>
      </section>
    
    <section xml:id="starting-identity-service"><title>Starting the Identity Service</title>
      
      <para>By default, configuration parameters (such as the IP and port binding for each service) are parsed from etc/keystone.conf, so ensure it is up-to-date prior to starting the service.</para>
      <para>To start up the Keystone service, enter the following:</para>
        
        <literallayout class="monospaced">$ cd ~/keystone/bin &amp;&amp; ./keystone </literallayout>
        
        <para>In return you should see something like this:</para>
        <literallayout class="monospaced">Starting the Legacy Authentication component
        Service API listening on 0.0.0.0:5000
        Admin API listening on 0.0.0.0:5001</literallayout>
        
        <para>Use this command for starting the auth server only which exposes the Service API:</para>
        
        <literallayout class="monospaced">$ ./bin/keystone-auth</literallayout>
        
        <para>Use this command for starting the admin server only which exposes the Admin API:</para>
        
        <literallayout class="monospaced">$ ./bin/keystone-admin</literallayout>
      <para>After starting keystone or running keystone-manage a keystone.db sqlite database should be created in the keystone folder.</para>
     </section>
    <section xml:id="configuring-the-identity-service"><title>Configuring the Identity Service</title>
  <para>Here are the steps to get started with authentication using Keystone, the project name for
      the OpenStack Identity Service. </para>
    <para>Typically a project that uses Keystone has settings in a configuration file:</para> 
      
      <para>
      <itemizedlist>
        <listitem>
          <para>In Compute, the settings are in etc/nova/api-paste.ini, but Keystone also provides
            an example file in keystone/examples/paste/nova-api-paste.ini. Restart the nova-api
            service for these settings to be configured.</para>
        </listitem>
        <listitem>
          <para>In Image Service, the settings are in glance-api.conf and glance-registry.conf
            configuration files in the examples/paste directory. Restart the glance-api service and
            also ensure your environment contains OS_AUTH credentials which you can set up with tools/nova_to_os_env.sh provided by the Glance project.</para>
        </listitem>
            <listitem>
          <para>In Object Storage, the settings are held in /etc/swift/proxy-server.conf in a
            [filter:keystone] section. Use <code>swift-init main start</code> to restart Object
            Storage with the new configuration. Here's an example
            /etc/swift/proxy-server.conf:</para>
        
        
          <literallayout class="monospaced">
[DEFAULT]
bind_port = 8888
user = &lt;user&gt;

[pipeline:main]
pipeline = catch_errors cache keystone proxy-server

[app:proxy-server]
use = egg:swift#proxy
account_autocreate = true

[filter:keystone]
use = egg:keystone#swiftauth
keystone_admin_token = 999888777666
keystone_url = http://proxy01:35357/2.0

[filter:cache]
use = egg:swift#memcache
set log_name = cache

[filter:catch_errors]
use = egg:swift#catch_errors
 </literallayout>
        </listitem>
          
       
      </itemizedlist>
    </para></section>
  <section xml:id="dependencies"><info><title>Dependencies</title></info>
    <para>Once Keystone is installed you need to initialize the database. You can do so with the keystone-manage command line utility. The keystone-manage utility helps with managing and configuring a Keystone installation. You configure the keystone-manage utility itself with a SQL Alchemy connection configuration via a parameter passed to the utility:</para>
    <para>--sql_connection=CONN_STRING</para>
    <para>Where the CONN_STRING is a proper SQLAlchemy connection string as described in
      http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html?highlight=engine#sqlalchemy.create_engine.</para>
    <para>One important use of keystone-manage is to setup the database. To do so, run:</para>
      <screen>
      keystone-manage db_sync</screen>
  </section>
  
<section xml:id="creating-tenants-users-roles-tokens-and-endpoints"><title>Creating Tenants, Users, Roles, Tokens and Endpoints</title>
  <para>Sample data entries are available in keystone/bin/sampledata.sh. The following are just
  examples for a walk-through.</para>
  <note><para>
    Some reserved roles are defined (and can be modified) through the keystone.conf in the /etc folder.</para>
  </note>
  <para>Add two tenants, and administrative tenant and a tenant named demo. Tenants are equivalent to projects in the previous auth system in Compute. In Object Storage, Tenants are similar to accounts in the swauth system.</para>
  <literallayout class="monospaced">  bin/keystone-manage  tenant add admin
  bin/keystone-manage  tenant add demo</literallayout>
  
  <para>Next add two users to the Identity Service and assign their passwords. The last value in the list is an ID number.</para>
  <literallayout class="monospaced">  bin/keystone-manage  user add admin p4ssw0rd 1
  bin/keystone-manage  user add demo p455w0rd 2</literallayout>
  
  <para>Now you can assign roles, which includes a set of rights and privileges that are double-checked with the token that the user is issued.</para>
  <literallayout class="monospaced">  bin/keystone-manage  role add Admin
  bin/keystone-manage  role add Member
  bin/keystone-manage  role grant Admin admin</literallayout>
  
  <para>Now define the endpointTemplates, which are URLs plus port values that indicate where a service may be accessed. This example shows many services available to Compute including the Image Service, the Object Storage service, as well as Identity itself. Since there is just one zone in this example, it represents all the services across the single region (but could also represent all the regions).</para> 
  <literallayout class="monospaced">  bin/keystone-manage  endpointTemplates add RegionOne swift http://%HOST_IP%:8080/v1/AUTH_%tenant_id% http://%HOST_IP%:8080/ http://%HOST_IP%:8080/v1/AUTH_%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne nova_compat http://%HOST_IP%:8774/v1.0/ http://%HOST_IP%:8774/v1.0  http://%HOST_IP%:8774/v1.0 1 1
  bin/keystone-manage  endpointTemplates add RegionOne nova http://%HOST_IP%:8774/v1.1/%tenant_id% http://%HOST_IP%:8774/v1.1/%tenant_id%  http://%HOST_IP%:8774/v1.1/%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne glance http://%HOST_IP%:9292/v1.1/%tenant_id% http://%HOST_IP%:9292/v1.1/%tenant_id% http://%HOST_IP%:9292/v1.1/%tenant_id% 1 1
  bin/keystone-manage  endpointTemplates add RegionOne identity http://%HOST_IP%:5000/v2.0 http://%HOST_IP%:5001/v2.0 http://%HOST_IP%:5000/v2.0 1 1</literallayout>
  
<para>  Now you add a default token for the admin user to get when requesting a token.</para>
  <literallayout class="monospaced">bin/keystone-manage  token add 999888777666 1 1 2015-02-05T00:00</literallayout>
  
  <para>This section adds the tenant endpoints for each user created above (admin with ID 1 and demo with ID 2).</para>
  <literallayout class="monospaced">  bin/keystone-manage  endpoint add 1 1
  bin/keystone-manage  endpoint add 1 2
  bin/keystone-manage  endpoint add 1 3
  bin/keystone-manage  endpoint add 1 4
  bin/keystone-manage  endpoint add 1 5
  bin/keystone-manage  endpoint add 1 6
  
  bin/keystone-manage  endpoint add 2 1
  bin/keystone-manage  endpoint add 2 2
  bin/keystone-manage  endpoint add 2 3
  bin/keystone-manage  endpoint add 2 4
  bin/keystone-manage  endpoint add 2 5
  bin/keystone-manage  endpoint add 2 6</literallayout>
  
  
  
  <para>You can configure Identity and Compute with a single region or multiple regions using
          zones. You need to add a label for the endpoint for each region. Having a single region
          doesn't require any work other than adding label.</para>
<para>
          <literallayout class="monospaced">keystone-manage endpointTemplates add SWRegion identity http://%HOST_IP%:5000/v2.0 http://%HOST_IP%:5001/v2.0 http://%HOST_IP%:5000/v2.0 1 1</literallayout>
        </para> </section>
  <section xml:id="curl-examples"><info><title>Curl examples</title></info>
 
 <para>All examples assume default port usage (5001) and use the example admin account created above.</para>
 
<para><emphasis>Admin Initial GET</emphasis></para>
 
 <para>Retrieves version, full API url, pdf doc link, and wadl link:</para>
 
 <screen>$> curl http://0.0.0.0:5001</screen>
 
 <para>or:</para>
 
 <screen>$> curl http://0.0.0.0:5001/v2.0/</screen>
 
 <para><emphasis>Retrieve token:</emphasis></para>
 
 <para>To retrieve the token and expiration date for a user:</para>
 
 <screen>$> curl -d '{"passwordCredentials":{"username": "MyAdmin", "password": "P@ssw0rd"}}' -H "Content-type: application/json" http://localhost:5001/v2.0/tokens</screen>
 
 <para>This will return something like:</para>
 
 <screen>$> {"auth": {"token": {"expires": "2011-08-10T17:45:22.838440", "id": "0eed0ced-4667-4221-a0b2-24c91f242b0b"}}}</screen>
 
  
 <note><para>Save the “id” value as you’ll be using it in the calls below.</para></note>
 
 <para><emphasis>To retrieve a list of tenants:</emphasis></para>
 
 <para>Run:</para>
 
 <screen>$> curl -H "X-Auth-Token:999888777666" http://localhost:5001/v2.0/tenants</screen>
 
 <para>This will return something like:</para>
 
 <screen>$> {"tenants": {"values": [{"enabled": 1, "id": "MyTenant", "description": null}], "links": []}}</screen>
 
 <para><emphasis>Retrieve a list of users:</emphasis></para>
 
<para> Run:</para>
 
 <screen>$> curl -H "X-Auth-Token:999888777666" http://localhost:5001/v2.0/users</screen>
 
 <para>This will return something like:</para>
 
 <screen>$> {"users": {"values": [{"email": null, "enabled": true, "id": "MyAdmin", "tenantId": "MyTenant"}], "links": []}}</screen>
 
 
 <para><emphasis>Retrieve information about the token:</emphasis></para>
 
 <para>Run:</para>
 
 <screen>$> curl -H "X-Auth-Token:999888777666" http://localhost:5001/v2.0/tokens/0eed0ced-4667-4221-a0b2-24c91f242b0b</screen>
 
<para> This will return something like:</para>
 
 <screen>$> {"auth": {"token": {"expires": "2011-08-11T04:26:58.145171", "id": "0eed0ced-4667-4221-a0b2-24c91f242b0b"}, "user": {"username": "MyAdmin", "roleRefs": [{"roleId": "Admin", "id": 1}], "tenantId": "MyTenant"}}}</screen>
 
<para><emphasis> Revoking a token:</emphasis></para>
 
 <para>Run:</para>
 
 <screen>$> curl -X DELETE -H "X-Auth-Token:999888777666" http://localhost:5001/tokens/0eed0ced-4667-4221-a0b2-24c91f242b0b</screen>
 
 <para><emphasis>Creating a tenant:</emphasis></para>
 
 <para>Run:</para>
 
<screen> $> curl -H "X-Auth-Token:999888777666" -H "Content-type: application/json" -d '{"tenant":{"id":"MyTenant2", "description":"My 2nd Tenant", "enabled":true}}'  http://localhost:5001/tenants</screen>
 
<para> This will return something like:</para>
 
 <screen>$> {"tenant": {"enabled": true, "id": "MyTenant2", "description": "My 2nd Tenant"}}</screen>
 
 <para><emphasis>Verifying the tenant:</emphasis></para> 
    
 <para>Run:</para>
 
 <screen>$> curl -H "X-Auth-Token:999888777666" http://localhost:5001/v2.0/tenants/MyTenant2</screen>
 
 <para>This will return something like:</para>
 
 <screen>$> {"tenant": {"enabled": 1, "id": "MyTenant2", "description": "My 2nd Tenant"}}</screen>
 
 <para><emphasis>Updating the tenant:</emphasis></para>
 
 <para>Run:</para>
 
 <screen>$> curl -X PUT -H "X-Auth-Token:999888777666" -H "Content-type: application/json" -d '{"tenant":{"description":"My NEW 2nd Tenant"}}' http://localhost:5001/v2.0/tenants/MyTenant2
</screen> 
 <para>This will return something like:
</para> 
 <screen>$> {"tenant": {"enabled": true, "id": "MyTenant2", "description": "My NEW 2nd Tenant"}}
</screen> 
 <para><emphasis>Deleting the tenant:</emphasis></para>
 
 <para>Run:</para>
 
 <screen>$> curl -X DELETE -H "X-Auth-Token:999888777666" http://localhost:5001/v2.0/tenants/MyTenant2</screen>
 
  </section>
</chapter>
